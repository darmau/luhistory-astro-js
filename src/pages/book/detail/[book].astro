---
import { sanityClient } from "sanity:client";
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import PageTitle from "@/components/PageTitle.astro";
import TextBlock from "@/components/text-block/TextBlock.astro";
import PageBlock from "@/components/PageBlock.astro";

type BookPathItem = {
  slug: string;
  title: string;
  subtitle?: string | null;
  overview: unknown;
  category?: string | null;
  publishDate: string;
  publisher?: string | null;
  purchaseLink?: string | null;
  heroImage?: string | null;
  cover?: string | null;
  people?: Array<{ name: string; title: string }>;
  blocks?: Array<Record<string, unknown>>;
};

export async function getStaticPaths() {
  const slugs = await sanityClient.fetch<
    BookPathItem[]
  >(`*[_type == 'book' && defined(slug) && defined(publishDate)] {
    "slug": slug.current,
    title,
    subtitle,
    "overview": overview[]{
      _type == 'imageBlock' => {
        type,
        "url": image.asset->url,
        "caption": image.caption
      },
      _type == 'gallery' => {
        type,
        title,
        "pictures": images[]{
          "url": asset->url,
          caption
        }
      },
      ...
    },
    category,
    publishDate,
    publisher,
    purchaseLink,
    "heroImage": heroImage.asset->url,
    "cover": cover.asset->url,
    "people": people[]{name, title},
    "blocks": pageBlocks[] {
      _type == 'relatedExternalLinks' => {
        "category": _type,
        "links": links[]{
          title,
          tag,
          url
        }
      },
      _type == 'relatedInternalLinks' => {
        "category": _type,
        "links": links[]->{
          "type": _type,
          title,
          "slug": slug.current
        },
        "assets": links[] {
          title,
          "type": "file",
          "url": asset->url
        }
      }
    }
  }`);
  const paths = slugs.map((book) => {
    return {
      params: {
        book: book.slug,
      },
      props: {
        title: book.title,
        subtitle: book.subtitle,
        cover: book.cover,
        publishDate: book.publishDate,
        publisher: book.publisher,
        people: book.people,
        overview: book.overview,
        heroImage: book.heroImage,
        purchaseLink: book.purchaseLink,
        blocks: book.blocks,
      },
    };
  });
  return paths;
}

const {
  title,
  subtitle,
  cover,
  publishDate,
  publisher,
  people,
  overview,
  heroImage,
  purchaseLink,
  blocks,
} = Astro.props as {
  title: string;
  subtitle?: string;
  cover: string;
  publishDate: string;
  publisher?: string;
  people?: Array<{ name: string; title: string }>;
  overview: unknown;
  heroImage?: string;
  purchaseLink?: string;
  blocks?: Array<Record<string, unknown>>;
};
---

<Layout title={title}>
  <PageTitle
    title={title}
    subtitle={subtitle}
    bgWhite={!heroImage}
    remoteUrl={heroImage}
  />
  <div
    class="p-4 mt-8 flex flex-col gap-8 8xl:p-0 lg:max-w-8xl lg:mx-auto lg:grid lg:grid-cols-12 mb-24"
  >
    <aside class="space-y-4 md:space-y-8 col-start-1 col-end-3 h-fit">
      <!--相关人-->
      {
        people && (
          <ul class="space-y-8 pl-0 list-none">
            {people.map((person) => (
              <li>
                <h3 class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase">
                  {person.title}
                </h3>
                <p class="mt-0 text-lg font-semibold font-title">
                  {person.name}
                </p>
              </li>
            ))}
          </ul>
        )
      }

      <!--出版社-->
      {
        publisher && (
          <div class="space-y-2">
            <h3 class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase">
              Publisher
            </h3>
            <p class="mt-0 text-lg font-semibold font-title">{publisher}</p>
          </div>
        )
      }

      <!--出版日期-->
      {
        publishDate && (
          <div class="space-y-2">
            <h3 class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase">
              Publication Date
            </h3>
            <p class="mt-0 text-lg font-semibold font-title">
              {new Date(publishDate).getFullYear()}
            </p>
          </div>
        )
      }

      <!--购买链接-->
      {
        purchaseLink && (
          <div class="flex gap-2 items-center pt-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width={1.5}
              stroke="currentColor"
              width="20"
              height="20"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M15.75 10.5V6a3.75 3.75 0 1 0-7.5 0v4.5m11.356-1.993 1.263 12c.07.665-.45 1.243-1.119 1.243H4.25a1.125 1.125 0 0 1-1.12-1.243l1.264-12A1.125 1.125 0 0 1 5.513 7.5h12.974c.576 0 1.059.435 1.119 1.007ZM8.625 10.5a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm7.5 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z"
              />
            </svg>

            <a
              href={purchaseLink}
              target="_blank"
              class="no-underline uppercase text-neutral-900 opacity-50 hover:opacity-100"
            >
              Buy
            </a>
          </div>
        )
      }
    </aside>
    <main class="col-start-4 col-end-12 md:grid md:grid-cols-8 md:gap-8">
      {
        cover && (
          <div class="col-start-1 col-span-8 md:col-span-6 bg-gray-50 aspect-[3/2]">
            <Image
              src={cover}
              alt={title}
              width="1280"
              height="840"
              class="object-cover w-full"
              format="avif"
              loading="eager"
            />
          </div>
        )
      }
      <div class="col-span-8">
        <TextBlock overview={overview} />
      </div>
      {blocks && <PageBlock blocks={blocks} />}
    </main>
  </div>
</Layout>

<style is:global>
  .swiper {
    overflow: visible !important;
  }
</style>
