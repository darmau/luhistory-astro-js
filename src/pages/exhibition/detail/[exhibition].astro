---
import { sanityClient } from "sanity:client";
import Layout from "@/layouts/Layout.astro";
import { Image } from "astro:assets";
import PageBlock from "@/components/PageBlock.astro";
import PageTitle from "@/components/PageTitle.astro";
import TextBlock from "@/components/text-block/TextBlock.astro";
import NextExhibition from "@/components/order/NextExhibition.astro";
import type { ExhibitionDetail } from "@/types";

export async function getStaticPaths() {
  const slugs = await sanityClient.fetch<
    ExhibitionDetail[]
  >(`*[_type == 'exhibition' && defined(slug) && defined(dateRange)] {
    title,
    "slug": slug.current,
    "subtitle": subtitle,
    "start": dateRange.startDate,
    "end": dateRange.endDate,
    "cover": cover.asset->url,
    "curator": curator,
    "place": location.place,
    "overview": overview[] {
      _type == 'imageBlock' => {
        type,
        "url": image.asset->url,
        "caption": image.caption
      },
      _type == 'gallery' => {
        type,
        title,
        "pictures": images[]{
          "url": asset->url,
          caption
        }
      },
      ...
    },
    "blocks": pageBlocks[]
      {
        _type == 'gallery' => {
          title, 
          "category": 'gallery',
          "gallery": type, 
          "images": images[]{
            caption,
            "url": asset->url
          }
        },
        _type == 'relatedBooks' => {
          "category": 'books',
          "books": books[]->{
            title,
            publishDate,
            "slug": slug.current,
            "cover": cover.asset->url
          }
        },
        _type == 'relatedArticles' => {
           "category": 'articles',
          "articles": articles[]->{
            title,
            "slug": slug.current,
            category
          }
        },
        _type == 'relatedInternalLinks' => {
          "category": _type,
          "links": links[]->{
            "type": _type,
            title,
            "slug": slug.current
          },
          "assets": links[] {
            title,
            "type": "file",
            "url": asset->url
            }
          }
      }
  }`);
  const paths = slugs.map((exhibition) => {
    return {
      params: {
        exhibition: exhibition.slug,
      },
      props: {
        title: exhibition.title,
        subtitle: exhibition.subtitle,
        start: exhibition.start,
        end: exhibition.end,
        cover: exhibition.cover,
        curator: exhibition.curator,
        city: exhibition.city,
        place: exhibition.place,
        blocks: exhibition.blocks,
        overview: exhibition.overview,
      },
    };
  });
  return paths;
}

const { title, subtitle, start, end, cover, curator, place, blocks, overview } =
  Astro.props as ExhibitionDetail;

// 将2023-12-09和2023-12-16转换成Dec 9 - 16, 2023
function formatDate(start: string, end: string) {
  const startDate = new Date(start);
  const endDate = new Date(end);
  const startMonth = startDate.toLocaleString("default", { month: "short" });
  const endMonth = endDate.toLocaleString("default", { month: "short" });
  const startDay = startDate.getDate();
  const endDay = endDate.getDate();
  const startYear = startDate.getFullYear();
  const endYear = endDate.getFullYear();
  if (startYear === endYear) {
    if (startMonth === endMonth) {
      return `${startMonth} ${startDay} - ${endDay}, ${startYear}`;
    } else {
      return `${startMonth} ${startDay} - ${endMonth} ${endDay}, ${startYear}`;
    }
  } else {
    return `${startMonth} ${startDay}, ${startYear} - ${endMonth} ${endDay}, ${endYear}`;
  }
}
---

<Layout title={title}>
  <PageTitle title={title} subtitle={subtitle} />
  <div
    class="p-4 flex flex-col gap-8 8xl:p-0 lg:max-w-8xl lg:mx-auto lg:grid lg:grid-cols-12 mb-24"
  >
    <aside class="space-y-4 md:space-y-8 col-start-1 col-end-3 h-fit">
      {
        curator && (
          <div>
            <h3 class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase">
              Curator
            </h3>
            <p class="mt-0 text-lg font-semibold font-serif">{curator}</p>
          </div>
        )
      }
      <div>
        <h3
          class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase"
        >
          Date
        </h3>
        <p class="mt-0 text-lg font-semibold font-serif">
          {formatDate(start, end)}
        </p>
      </div>
      {
        place && (
          <div>
            <h3 class="my-0 text-sm font-sans text-neutral-900 opacity-50 tracking-widest uppercase">
              Location
            </h3>
            <p class="mt-0 text-lg font-semibold font-serif">{place}</p>
          </div>
        )
      }
    </aside>
    <main class="col-start-4 col-end-12 md:grid md:grid-cols-8 md:gap-8">
      {
        cover && (
          <Image
            src={cover}
            alt={title}
            width="1280"
            height="840"
            class="col-start-1 col-span-6"
            format="avif"
            loading="eager"
          />
        )
      }
      <TextBlock overview={overview} />
      {blocks && <PageBlock blocks={blocks} />}
    </main>
    <NextExhibition slug={Astro.params.exhibition} />
  </div>
</Layout>

<style is:global>
  .swiper {
    overflow: visible !important;
  }
</style>
