---
import {sanityClient} from "sanity:client";
import {Picture, getImage} from 'astro:assets';

type HomepageRecord = {
  slogan: string;
  image?: { url?: string | null } | null;
};

const homepageData = await sanityClient.fetch<HomepageRecord[]>(`
  *[_type == 'homepage']{
    slogan,
    "image": cover.asset->{url}
  }`)

const homepage = homepageData[0];
const headerString: string[] = homepage?.slogan?.split(', ').filter(Boolean) ?? [];
const heroImageUrl = homepage?.image?.url ?? null;
const heroImageAlt = homepage?.slogan ?? "Homepage hero image";
const heroImageSizes = "(min-width: 1024px) 33vw, (min-width: 768px) 45vw, 80vw";
const heroImagePreload = heroImageUrl
  ? await getImage({
      src: heroImageUrl,
      width: 720,
      height: Math.round(720 / (3 / 4)),
      format: "avif",
      fit: "cover",
    })
  : null;
---
<div
  class = "col-start-1 col-span-12 flex flex-col items-center p-4 gap-8 justify-between mb-8 sm:gap-0 sm:p-0 sm:col-start-2 sm:col-span-10 sm:flex-row lg:mb-40"
>
  <h1
    class = "text-neutral-900 font-bold font-serif leading-tight text-5xl text-center sm:text-left md:z-10 md:text-8xl md:mr-[-50%] md:-ml-[2px]"
    id = "hero-text"
  >
    {headerString.map((word, index) => {
      return (
        <span class = "block" style = {{'--delay': `${index * 0.1}s`}}>
          {word}{index < headerString.length - 1 && <span>,</span>}
        </span>
      )
    })}
  </h1>
  {heroImageUrl && (
    <>
      {heroImagePreload && (
        <Fragment slot="head">
          <link
            rel="preload"
            as="image"
            href={heroImagePreload.src}
            imagesrcset={heroImagePreload.srcSet?.attribute}
            imagesizes={heroImageSizes}
            type="image/avif"
          />
        </Fragment>
      )}
      <Picture
        src={heroImageUrl}
        alt={heroImageAlt}
        formats={["avif", "webp"]}
        widths={[360, 480, 640, 720]}
        sizes={heroImageSizes}
        class="hero-img aspect-[3/4] w-1/2 object-cover brightness-95 md:z-0"
        pictureAttributes={{ class: "hero-picture flex-shrink-0" }}
        loading="eager"
        decoding="async"
        fetchpriority="high"
        fit="cover"
      />
    </>
  )}
</div>

<style>
  .hero-img {
    min-height: 320px;
    min-width: 240px;
  }

  @media (min-width: 768px) {
    .hero-img {
      min-height: 560px;
      min-width: 360px;
    }
  }
</style>
