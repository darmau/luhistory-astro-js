---
import { computePagination } from './paginationModel';
import type { PaginationProps } from '@/types';

const {
  page,
  anchor,
  paddingClass = 'py-16 lg:py-40',
} = Astro.props as PaginationProps;

const currentPage = page.currentPage ?? 1;
const {
  shouldRender,
  segments,
  pageHref,
  prevHref,
  nextHref,
} = computePagination(page, {
  anchor,
  currentPathname: Astro.url?.pathname ?? null,
});

const hasPrev = Boolean(prevHref);
const hasNext = Boolean(nextHref);
---
{shouldRender ? (
  <div class={`max-w-[1088px] mx-auto grid grid-cols-10 border-t border-neutral-900 border-opacity-20 ${paddingClass}`}>
    <div class="col-start-2 col-span-8 lg:col-start-3 lg:col-span-8 flex flex-wrap items-center justify-between gap-4 md:gap-6">
      <a
        class={`transition-opacity ${hasPrev ? '' : 'pointer-events-none opacity-0'}`}
        href={prevHref}
      >
        ←&nbsp;Previous
      </a>
      <nav class="hidden md:flex flex-1 flex-wrap items-center justify-center gap-2 tracking-wider uppercase max-w-full md:flex-none md:flex-nowrap">
        {segments.map((segment) => (
          segment === 'ellipsis' ? (
            <span class="px-3 py-1 text-neutral-400 select-none">
              ...
            </span>
          ) : (
            <a
              class={`px-3 py-1 border border-transparent transition-colors ${segment === currentPage ? 'border-neutral-900 text-neutral-900' : 'text-neutral-500 hover:text-neutral-900'}`}
              href={pageHref[segment]}
            >
              {segment}
            </a>
          )
        ))}
      </nav>
      <a
        class={`transition-opacity ${hasNext ? '' : 'pointer-events-none opacity-0'}`}
        href={nextHref}
      >
        Next&nbsp;→
      </a>
    </div>
  </div>
) : ''}
